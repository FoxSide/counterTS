{"version":3,"sources":["Counter/SetValue/SetValue.module.css","Counter/Counter.module.css","App.module.css","Counter/Button/Button.module.css","Counter/Button/Button.tsx","Counter/Counter.tsx","Counter/SetValue/SetValue.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","disabled","value","className","s","button","onClick","callBack","title","Counter","count","callBackAdd","callBackReset","maxValue","minValue","changeScreen","error","screen","text","red","buttons","SetValue","useState","setMinValue","setmaxValue","useEffect","MinValueAsStr","localStorage","getItem","MaxValueAsStr","newMinValue","JSON","parse","newMaxValue","Error","callbackError","inpScreen","item","onChange","e","currentTarget","callbackChangeScreen","errorInp","inp","type","buttonBody","newValue","App","setCount","setChangeScreen","setError","appWrapp","body","change","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f5af827.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inpScreen\":\"SetValue_inpScreen__l0kwe\",\"inp\":\"SetValue_inp__1vErY\",\"item\":\"SetValue_item__2xxYH\",\"buttonBody\":\"SetValue_buttonBody__2zWVm\",\"errorInp\":\"SetValue_errorInp__1sOXz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen\":\"Counter_screen__u_PbE\",\"count\":\"Counter_count__2lzAA\",\"red\":\"Counter_red__1q9Zx\",\"buttons\":\"Counter_buttons__2lXyr\",\"text\":\"Counter_text__3o0JG\",\"error\":\"Counter_error__1iDp8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__39AmZ\",\"appWrapp\":\"App_appWrapp__3uLCv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__fWm5r\"};","import React from \"react\";\r\nimport s from './Button.module.css';\r\n\r\ntype PropsType = {\r\n  title: string\r\n  callBack: () => void\r\n  value: boolean\r\n}\r\nexport const Button = (props: PropsType) => {\r\n\r\n  const onClickHandler = () => props.callBack()\r\n\r\n  return (\r\n      <button disabled={props.value} className={s.button} onClick={onClickHandler}>{props.title}</button>\r\n  )\r\n}","import React from \"react\";\r\nimport s from './Counter.module.css';\r\nimport {Button} from \"./Button/Button\";\r\n\r\n\r\ntype PropsType = {\r\n  maxValue: number\r\n  minValue: number\r\n  count: number\r\n  callBackAdd: () => void\r\n  callBackReset: () => void\r\n  changeScreen: boolean\r\n  error: boolean\r\n}\r\n\r\nexport const Counter = ({count, callBackAdd, callBackReset, maxValue, minValue, changeScreen, error}: PropsType) => {\r\n\r\n  let screenItem = () => {\r\n    if (error) {\r\n      return <div className={s.error}>Incorrect value!</div>\r\n    }\r\n    if (changeScreen) {\r\n      return <div className={s.text}>Enter values and press 'set'</div>\r\n    }\r\n    else {\r\n      return <div className={count === maxValue ? s.red : s.count}>{count}</div>\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={s.screen}>\r\n        {screenItem()}\r\n      </div>\r\n      <div className={s.buttons}>\r\n        <Button title={'inc'} callBack={callBackAdd} value={count === maxValue || changeScreen}/>\r\n        <Button title={'reset'} callBack={callBackReset} value={count === minValue || changeScreen}/>\r\n      </div>\r\n    </>\r\n  );\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './SetValue.module.css'\r\nimport {Button} from \"../Button/Button\";\r\n\r\ntype PropsType = {\r\n  newValue: (minValue: number, maxValue: number) => void\r\n  callbackChangeScreen: () => void\r\n  callbackError: (change: boolean) => void\r\n}\r\n\r\nexport const SetValue = (props: PropsType) => {\r\n  const [minValue, setMinValue] = useState(0)\r\n  const [maxValue, setmaxValue] = useState(5)\r\n\r\n  useEffect(() => {\r\n    let MinValueAsStr = localStorage.getItem('minValue')\r\n    let MaxValueAsStr = localStorage.getItem('maxValue')\r\n    if (MinValueAsStr) {\r\n      let newMinValue = JSON.parse(MinValueAsStr)\r\n      setMinValue(newMinValue)\r\n    }\r\n    if (MaxValueAsStr) {\r\n      let newMaxValue = JSON.parse(MaxValueAsStr)\r\n      setmaxValue(newMaxValue)\r\n    }\r\n  }, [])\r\n\r\n  const onChangeMinHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setMinValue(+e.currentTarget.value)\r\n    props.callbackChangeScreen()\r\n  }\r\n  const onChangeMaxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setmaxValue(+e.currentTarget.value)\r\n    props.callbackChangeScreen()\r\n  }\r\n  const callBackHandler = () => {\r\n    props.newValue(minValue, maxValue)\r\n  }\r\n\r\n  const Error = minValue >= maxValue || minValue < 0 || maxValue < 0\r\n  Error ? props.callbackError(true) : props.callbackError(false)\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.inpScreen}>\r\n        <div className={s.item}>Start Value :<input onChange={onChangeMinHandler}\r\n                                                    className={minValue < 0 || minValue >= maxValue ? s.errorInp : s.inp}\r\n                                                    type=\"number\" value={minValue}/></div>\r\n        <div className={s.item}>Max Value :<input onChange={onChangeMaxHandler}\r\n                                                  className={maxValue < 0 || minValue >= maxValue ? s.errorInp : s.inp}\r\n                                                  type=\"number\" value={maxValue}/></div>\r\n      </div>\r\n      <div className={s.buttonBody}>\r\n        <Button title={'set'} callBack={callBackHandler} value={Error}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, {useEffect, useState} from 'react';\nimport s from './App.module.css';\nimport {Counter} from \"./Counter/Counter\";\nimport {SetValue} from \"./Counter/SetValue/SetValue\";\n\nfunction App() {\n  const [minValue, setMinValue] = useState(0)\n  const [maxValue, setmaxValue] = useState(5)\n  const [count, setCount] = useState(minValue)\n  const [changeScreen, setChangeScreen] = useState(true)\n  const [error, setError] = useState(false)\n\n\n\n  useEffect(() => {\n    let MinValueAsStr = localStorage.getItem('minValue')\n    let MaxValueAsStr = localStorage.getItem('maxValue')\n    if (MinValueAsStr) {\n      let newMinValue = JSON.parse(MinValueAsStr)\n      setMinValue(newMinValue)\n    }\n    if (MaxValueAsStr) {\n      let newMaxValue = JSON.parse(MaxValueAsStr)\n      setmaxValue(newMaxValue)\n    }\n    setCount(minValue)\n  }, [minValue])\n\n  const addCount = () => {\n    if (minValue < maxValue) {\n      setCount(count + 1)\n    }\n  }\n  const resetCount = () => {\n    setCount(minValue)\n  }\n\n  const newValue = (minValue: number, maxValue: number) => {\n    setMinValue(minValue)\n    setmaxValue(maxValue)\n    setCount(minValue)\n    setChangeScreen(false)\n    localStorage.setItem('minValue', JSON.stringify(minValue))\n    localStorage.setItem('maxValue', JSON.stringify(maxValue))\n  }\nconst callbackChangeScreen = () => {\n  setChangeScreen(true)\n}\nconst callbackError = (change: boolean) => {\n    setError(change)\n}\n\n\n  return (\n    <div className={s.appWrapp}>\n      <div className={s.body}>\n        <SetValue callbackError={callbackError} callbackChangeScreen={callbackChangeScreen} newValue={newValue}/>\n      </div>\n      <div className={s.body}>\n        <Counter error={error} changeScreen={changeScreen} minValue={minValue} maxValue={maxValue} count={count} callBackAdd={addCount} callBackReset={resetCount}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}